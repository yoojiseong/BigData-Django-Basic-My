

### 🚀 DRF 블로그 API 만들기: A to Z

이 튜토리얼을 통해 `Post` 모델을 만들고, 
해당 모델에 대한 API 엔드포인트를 생성하여 JSON 형식으로 데이터를 
생성(Create), 조회(Read), 수정(Update), 삭제(Delete)하는 방법을 배우게 됩니다.

#### 1\. 환경 설정 및 프로젝트 생성

먼저 가상환경을 만들고 Django와 DRF를 설치합니다.

```bash
# 1. 가상환경 생성 및 활성화
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate

# 2. Django 및 DRF 설치
pip install django djangorestframework

# 3. 프로젝트 및 앱 생성
django-admin startproject myproject
cd myproject
python manage.py startapp blog
```

이제 `myproject/settings.py` 파일의 `INSTALLED_APPS`에 `rest_framework`와 `blog` 앱을 추가합니다.

```python
# myproject/settings.py

INSTALLED_APPS = [
    # ...
    'rest_framework',
    'blog',
    # ...
]
```

-----

#### 2\. 모델(Model) 정의

블로그 게시글을 나타내는 간단한 `Post` 모델을 만듭니다.

```python
# blog/models.py

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title
```

-----

#### 3\. 시리얼라이저(Serializer) 생성

모델 데이터를 JSON으로 변환해 줄 시리얼라이저를 만듭니다. `blog` 앱 폴더에 `serializers.py` 파일을 새로 생성하세요.

```python
# blog/serializers.py (새 파일)

from rest_framework import serializers
from .models import Post

class PostSerializer(serializers.ModelSerializer):
    class Meta:
        model = Post
        fields = '__all__'  # 모델의 모든 필드를 포함
```

\*\*`ModelSerializer`\*\*를 사용하면 모델에 정의된 필드를 기반으로 시리얼라이저를 매우 쉽게 만들 수 있습니다.

-----

#### 4\. 뷰(View) 작성

API의 로직을 처리할 뷰를 작성합니다. DRF의 \*\*`ModelViewSet`\*\*을 사용하면 기본적인 CRUD 로직을 코딩할 필요 없이 자동으로 생성해 줍니다.

```python
# blog/views.py

from rest_framework import viewsets
from .models import Post
from .serializers import PostSerializer

class PostViewSet(viewsets.ModelViewSet):
    """
    Post 모델에 대한 CRUD API를 제공하는 ViewSet
    """
    queryset = Post.objects.all().order_by('-created_at') # 모든 Post 객체를 가져와 최신순으로 정렬
    serializer_class = PostSerializer
```

-----

#### 5\. URL 연결

이제 사용자가 API에 접근할 수 있도록 URL을 설정합니다. DRF의 `Router`를 사용하면 ViewSet에 대한 URL을 자동으로 생성할 수 있어 편리합니다.

먼저, `blog` 앱에 `urls.py` 파일을 새로 만듭니다.

```python
# blog/urls.py (새 파일)

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import PostViewSet

# DefaultRouter를 생성합니다.
router = DefaultRouter()
# 'post'라는 URL prefix에 PostViewSet을 등록합니다.
router.register('posts', PostViewSet)

urlpatterns = [
    path('', include(router.urls)),
]
```

그리고 프로젝트의 메인 URL 설정 파일인 `myproject/urls.py`에 위에서 만든 `blog/urls.py`를 연결합니다.

```python
# myproject/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('blog.urls')), # '/api/' 경로로 시작하는 모든 요청을 blog.urls로 전달
]
```

-----

#### 6\. 데이터베이스 마이그레이션

지금까지 변경한 모델 정보를 데이터베이스에 적용합니다.

```bash
python manage.py makemigrations
python manage.py migrate
```

-----

#### 7\. 서버 실행 및 CRUD 테스트

모든 설정이 끝났습니다\! 개발 서버를 실행하고 `curl`이나 웹 브라우저를 통해 API를 테스트해 봅시다.

```bash
python manage.py runserver
```

**C (Create): 새 게시글 생성 (POST)**

```bash
curl -X POST -H "Content-Type: application/json" -d '{"title": "첫 번째 글", "content": "DRF 테스트 중입니다."}' http://127.0.0.1:8000/api/posts/
```

> **응답:** `{"id": 1, "title": "첫 번째 글", "content": "DRF 테스트 중입니다.", "created_at": "..."}`

**R (Read): 전체 게시글 조회 (GET)**

```bash
curl -X GET http://127.0.0.1:8000/api/posts/
```

> **응답:** `[{"id": 1, ...}]`
> 웹 브라우저에서 [http://127.0.0.1:8000/api/posts/](https://www.google.com/url?sa=E&source=gmail&q=http://127.0.0.1:8000/api/posts/) 로 접속하면 DRF가 제공하는 멋진 UI로도 확인할 수 있습니다.

**R (Read): 특정 게시글 조회 (GET)**

```bash
curl -X GET http://127.0.0.1:8000/api/posts/1/
```

> **응답:** `{"id": 1, ...}`

**U (Update): 게시글 수정 (PUT)**

```bash
curl -X PUT -H "Content-Type: application/json" -d '{"title": "수정된 제목", "content": "내용을 수정했습니다."}' http://127.0.0.1:8000/api/posts/1/
```

> **응답:** `{"id": 1, "title": "수정된 제목", "content": "내용을 수정했습니다.", "created_at": "..."}`

**D (Delete): 게시글 삭제 (DELETE)**

```bash
curl -X DELETE http://127.0.0.1:8000/api/posts/1/
```

> **응답:** (내용 없음, 상태 코드 204 No Content)

이제 `http://127.0.0.1:8000/api/posts/`로 다시 GET 요청을 보내보면 게시글이 삭제되어 비어있는 것을 확인할 수 있습니다.
========================================


### \#\# 8. Swagger (API 문서 자동화) 설정 및 테스트

Swagger UI를 이용하면 API 명세를 자동으로 문서화하고, 웹 브라우저 상에서 직접 API를 테스트해볼 수 있어 매우 편리합니다. `curl`을 사용하는 것보다 훨씬 직관적입니다.

#### **1) `drf-yasg` 라이브러리 설치**

Swagger UI를 생성하기 위한 라이브러리인 `drf-yasg`(Yet another Swagger generator)를 설치합니다.

```bash
pip install drf-yasg
```

#### **2) `settings.py`에 앱 추가**

`myproject/settings.py` 파일의 `INSTALLED_APPS`에 `drf_yasg`를 추가합니다.

```python
# myproject/settings.py

INSTALLED_APPS = [
    # ...
    'rest_framework',
    'drf_yasg',  # <-- 추가
    'blog',
    # ...
]
```

#### **3) `urls.py`에 Swagger URL 설정**

프로젝트의 메인 URL 설정 파일인 `myproject/urls.py`를 수정하여 Swagger UI에 접근할 수 있는 경로를 추가합니다.

```python
# myproject/urls.py

from django.contrib import admin
from django.urls import path, include

# --- Swagger 관련 라이브러리 import ---
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
# ------------------------------------

# --- Swagger 기본 설정 ---
schema_view = get_schema_view(
   openapi.Info(
      title="Blog API",
      default_version='v1',
      description="블로그 API 서비스 문서",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="contact@example.com"),
      license=openapi.License(name="BSD License"),
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),
)
# -------------------------


urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('blog.urls')),

    # --- Swagger URL patterns ---
    path('swagger<format>/', schema_view.without_ui(cache_timeout=0), name='schema-json'),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
    # --------------------------
]
```

#### **4) 서버 실행 및 Swagger UI 접속**

다시 개발 서버를 실행합니다.

```bash
python manage.py runserver
```

이제 웹 브라우저를 열고 아래 주소로 접속합니다.

  * **`http://127.0.0.1:8000/swagger/`**

#### **5) Swagger UI에서 CRUD 테스트하기**

`curl` 명령어 대신 Swagger UI를 통해 직관적으로 API를 테스트할 수 있습니다.

**C (Create): 새 게시글 생성 (POST)**

1.  `blog` API 목록에서 **`POST /api/posts/`** 섹션을 클릭하여 펼칩니다.
2.  오른쪽 상단의 **`Try it out`** 버튼을 클릭합니다.
3.  `Request body`의 예시 JSON에서 `id`와 `created_at` 필드를 지우고, `title`과 `content`를 원하는 내용으로 수정합니다.
    ```json
    {
      "title": "Swagger로 작성한 글",
      "content": "Swagger UI에서 테스트 중입니다."
    }
    ```
4.  **`Execute`** 버튼을 클릭하여 요청을 보냅니다.
5.  `Responses` 섹션에서 `Code 201` (생성 성공)과 함께 생성된 데이터가 반환되는 것을 확인합니다.

**R (Read): 전체 게시글 조회 (GET)**

1.  **`GET /api/posts/`** 섹션을 클릭합니다.
2.  **`Try it out`** -\> **`Execute`** 버튼을 차례로 클릭합니다.
3.  `Responses` 섹션에서 방금 생성한 게시글을 포함한 전체 목록이 `JSON` 형식으로 반환되는 것을 확인합니다.

이렇게 Swagger UI를 활용하면 다른 API(PUT, DELETE 등)들도 파라미터를 입력하며 손쉽게 테스트할 수 있습니다.